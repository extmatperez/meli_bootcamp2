Devolver restaurante_id, nombre, barrio y tipo_cocina pero excluyendo _id para un documento (el primero).
db.restaurantes.find({},{_id:0,restaurante_id:1,nombre:1,barrio:1,tipo_cocina:1})


Devolver restaurante_id, nombre, barrio y tipo_cocina 
para los primeros 3 restaurantes que contengan 'Bake' en alguna parte de su nombre.
db.restaurantes.find({nombre: /Bake/},{_id:0,restaurante_id:1,nombre:1,barrio:1,tipo_cocina:1}).limit(3)

Contar los restaurantes de comida (tipo_cocina) china (Chinese) o tailandesa (Thai) del barrio (barrio) Bronx. Consultar or versus in.
db.restaurantes.find({$or:[{tipo_cocina:"Chineses"},{tipo_cocina:"Thal"},{barrio:"Bronx"}]}).count()

Traer 3 restaurantes que hayan recibido al menos una calificación de grado 'A' con puntaje mayor a 20. Una misma calificación debe cumplir con ambas condiciones simultáneamente; investigar el operador elemMatch.
db.restaurantes.find(
db.restaurantes.find(
   { grades: { $elemMatch: { grade:"A", score: { $gt: 20 } } }}
).limit(3)


¿A cuántos documentos les faltan las coordenadas geográficas? En otras palabras, revisar si el tamaño de direccion.coord es 0 y contar.
db.restaurantes.find(

db.restaurantes.count(
   { "address.coord": { $size: 0 } }
)

Devolver nombre, barrio, tipo_cocina y grados para los primeros 3 restaurantes; de cada documento solo la última calificación. Ver el operador slice.
db.restaurantes.find(
   { },
   { name: 1, borough: 1, cuisine: 1, grades: { $slice: -1 } }
).limit(3)